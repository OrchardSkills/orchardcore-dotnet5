@using OrchardCore.Mvc.Utilities
@using OrchardCore.ContentManagement.Metadata.Settings
@using OrchardCore.ContentManagement.Metadata.Models;
@using OrchardCore.DisplayManagement;

@model EditFieldViewModel

@inject OrchardCore.DisplayManagement.Theming.IThemeManager ThemeManager
@inject OrchardCore.DisplayManagement.Descriptors.IShapeTableManager ShapeTableManager

@{
    var theme = await ThemeManager.GetThemeAsync();
    var shapeTable = ShapeTableManager.GetShapeTable(theme?.Id);
    var editorShapes = shapeTable.Bindings.Keys.Where(x => x.StartsWith(Model.PartFieldDefinition.FieldDefinition.Name + "_Option__", StringComparison.OrdinalIgnoreCase) || x.Equals(Model.PartFieldDefinition.FieldDefinition.Name + "_Option", StringComparison.OrdinalIgnoreCase));
    var displayShapes = shapeTable.Bindings.Keys.Where(x => x.StartsWith(Model.PartFieldDefinition.FieldDefinition.Name + "_DisplayOption__", StringComparison.OrdinalIgnoreCase) || x.Equals(Model.PartFieldDefinition.FieldDefinition.Name + "_DisplayOption", StringComparison.OrdinalIgnoreCase));
    var returnUrl = ViewData["returnUrl"]?.ToString();
}

<h1>@RenderTitleSegments(T["\"{0}\" settings for \"{1}\"", Model.DisplayName, Model.PartFieldDefinition.PartDefinition.DisplayName()])</h1>

<form asp-action="EditField" asp-route-returnUrl="@ViewData["returnUrl"]">
    @Html.ValidationSummary()
    <div class="form-group">
        <div class="w-md-75 w-xl-50 pr-md-3">
            <label asp-for="DisplayName">@T["Display Name"]</label>
            <input asp-for="DisplayName" autofocus class="form-control" />
        </div>
        <span class="hint">@T["Name of the field as it will be displayed in screens."]</span>
    </div>

    <div class="form-group">
        <div class="w-sm-75 w-md-50 w-lg-25 pr-md-3">
            <label asp-for="Name">@T["Technical Name"]</label>
            <input asp-for="Name" class="form-control" readonly />
        </div>
        <span class="hint">@T["Technical name of the field."]</span>
    </div>

    @if (Model.Shape.Content != null)
    {
        <div class="form-group">
            @await DisplayAsync(Model.Shape.Content)
        </div>

        @if (editorShapes.Any())
        {
            <div class="form-group">
                <div class="w-100 w-md-50 pr-md-3">
                    <label asp-for="Editor">@T["What type of editor should be used?"]</label>
                    <select asp-for="Editor" class="form-control" id="field-editor-select">
                        @foreach (var editorShape in editorShapes)
                        {
                            dynamic shape = await Factory.CreateAsync(editorShape);
                            shape.Editor = Model.Editor;
                            @await DisplayAsync(shape)
                        }
                    </select>
                </div>
            </div>
        }

        <div id="field-editor-container" class="form-group" style="display: none">
            @await DisplayAsync(Model.Shape.Editor)
        </div>

        @if (displayShapes.Any())
        {
            <div class="form-group">
                <div class="w-100 w-md-50 pr-md-3">
                    <label asp-for="DisplayMode">@T["What type of display mode should be used?"]</label>
                    <select asp-for="DisplayMode" class="form-control" id="field-display-select">
                        @foreach (var displayShape in displayShapes)
                        {
                            dynamic shape = await Factory.CreateAsync(displayShape);
                            shape.DisplayMode = Model.DisplayMode;
                            @await DisplayAsync(shape)
                        }
                    </select>
                </div>
            </div>
        }

        <div id="field-display-container" class="form-group" style="display: none">
            @await DisplayAsync(Model.Shape.DisplayMode)
        </div>
    }

    <div class="form-group">
        <button class="btn btn-primary save" type="submit" name="submit.Save" value="Save">@T["Save"]</button>
        @if (Url.IsLocalUrl(returnUrl))
        {
            <a class="btn btn-secondary cancel" role="button" href="@returnUrl">@T["Cancel"]</a>
        }
    </div>
</form>

<script at="Foot">
    //<![CDATA[
    $(function () {
        $('.field-editor').hide();
        $('#field-editor-container').show();
        var fieldEditorSelect = $('#field-editor-select');
        if (fieldEditorSelect.length > 0) {
            $('.field-editor-' + fieldEditorSelect.val().toLowerCase()).show();

            fieldEditorSelect.change(function () {
                $('.field-editor').hide();
                $('.field-editor-' + fieldEditorSelect.val().toLowerCase()).show();
            });
        }

        $('.field-display').hide();
        $('#field-display-container').show();
        var fieldDisplaySelect = $('#field-display-select');
        if (fieldDisplaySelect.length > 0) {
            $('.field-display-' + fieldDisplaySelect.val().toLowerCase()).show();

            fieldDisplaySelect.change(function () {
                console.log('boom');
                $('.field-display').hide();
                $('.field-display-' + fieldDisplaySelect.val().toLowerCase()).show();
            });
        }
    });
    //]]>
</script>
