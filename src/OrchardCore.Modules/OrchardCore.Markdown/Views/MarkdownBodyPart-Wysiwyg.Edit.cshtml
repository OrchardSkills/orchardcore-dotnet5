@model MarkdownBodyPartViewModel
@using OrchardCore.ContentLocalization
@using OrchardCore.ContentManagement.Metadata.Models
@using OrchardCore.Markdown.ViewModels
@using OrchardCore.Markdown.Settings

@{
    var settings = Model.TypePartDefinition.GetSettings<MarkdownBodyPartSettings>();
    var culture = await Orchard.GetContentCultureAsync(Model.MarkdownBodyPart.ContentItem);
}

<script asp-name="simplemde" depends-on="admin" asp-src="~/OrchardCore.Markdown/Scripts/simplemde.min.js" at="Foot"></script>
<style asp-name="codemirror"></style>
<style asp-name="simplemdecss" asp-src="~/OrchardCore.Markdown/Styles/simplemde.min.css" debug-src="~/OrchardCore.Markdown/Styles/simplemde.css"></style>

@await DisplayAsync(await New.ShortcodeModal())

<div class="form-group simplemde-editor">
    <label asp-for="Markdown">@Model.TypePartDefinition.DisplayName()</label>
    <span class="hint">@T["The markdown text of the content item."]</span>
    <textarea asp-for="Markdown" rows="5" class="form-control content-preview-text"></textarea>
</div>

<script at="Foot">
    $(function () {
        var markdownElement = document.getElementById("@Html.IdFor(m => m.Markdown)");
        @* When part is rendered by a flow part only the elements scripts are rendered, so the html element will not exist. *@
        if (markdownElement) {
            var simplemde = new SimpleMDE({
                element: markdownElement,
                forceSync: true,
                toolbar: simplemdeToolbar,
                autoDownloadFontAwesome: false
            });

            initializeSimpleMdeShortcodeWrapper(simplemde);

            simplemde.codemirror.on('change', function () {
                $(document).trigger('contentpreview:render');
            });

            @if (culture.IsRightToLeft())
            {
                <text>$('.editor-toolbar').attr('style', 'direction:rtl;text-align:right');
                $('.CodeMirror').attr('style', 'text-align:right');</text>
            }
        }
    });
</script>
