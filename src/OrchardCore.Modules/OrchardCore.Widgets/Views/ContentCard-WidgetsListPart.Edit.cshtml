@using OrchardCore.ContentManagement.Metadata.Settings;
@inject OrchardCore.ContentManagement.Metadata.IContentDefinitionManager ContentDefinitionManager

@{
    var contentType = ContentDefinitionManager.GetTypeDefinition((string)Model.ContentItem.ContentType).DisplayName;
    var widgetContentTypes = ContentDefinitionManager.ListTypeDefinitions().Where(t => t.GetSettings<ContentTypeSettings>().Stereotype == "Widget");
}

<div class="widget widget-editor card my-1 @(Model.Inline != true ? "collapsed" : "")">
    <div class="widget-editor-header card-header text-muted  py-1 pl-3 pr-1">
        @if (Model.CanMove != false)
        {
            <div class="widget-editor-handle"><i class="fas fa-arrows-alt"></i></div>
        }
        <button type="button" class="btn btn-outline-secondary btn-sm widget-list-editor-btn-toggle widget-editor-btn-collapse"><i class="fa fa-angle-down" aria-hidden="true"></i></button>
        <button type="button" class="btn btn-outline-secondary btn-sm widget-list-editor-btn-toggle widget-editor-btn-expand"><i class="fa fa-angle-up" aria-hidden="true"></i></button>
        @contentType
        <div class="btn-widget-metadata border border-info w-100">
            <div class="btn-group">
                    @if (Model.CanInsert != false)
                    {
                        <button type="button" title="@T["Insert Widget"]" class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <i class="fa fa-plus" aria-hidden="true"></i>
                        </button>
                        <div class="dropdown-menu dropdown-menu-right">
                            @foreach (var type in widgetContentTypes.OrderBy(w => w.DisplayName))
                            {
                                <a
                                class="dropdown-item insert-list-widget btn-sm"
                                data-target-id="@Model.TargetId"
                                data-prefixes-name="@Model.PrefixesName"
                                data-zones-name="@Model.ZonesName"
                                data-contenttypes-name="@Model.ContentTypesName"
                                data-widget-type="@type.Name"
                                data-zone="@Model.ZoneValue"
                                href="javascript:;">@type.DisplayName</a>
                            }
                        </div>
                    }
                </div>
        </div>

        <div class="btn-group btn-group-sm float-sm-right" role="group">
            @if (Model.CanDelete != false)
            {
                <button type="button" class="btn btn-danger widget-list-delete" data-title="@T["Delete"]" data-message="@T["Are you sure you want to remove this item?"]"><i class="fa fa-trash" aria-hidden="true"></i></button>
            }
        </div>
    </div>
    <div class="widget-editor-body card-body px-2 py-2">
        <div class="w-100">
            @if (Model.ContentEditor != null)
            {
                @await DisplayAsync(Model.ContentEditor)
            }
        </div>
     </div>
    @if (Model.Footer != null)
    {
        <div class="widget-editor-footer card-footer text-muted px-1 py-1">
                @await DisplayAsync(Model.Footer)
        </div>
    }
</div>
